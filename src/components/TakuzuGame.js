import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Button, Modal } from 'react-bootstrap';
import { getFirestore, collection, addDoc, serverTimestamp } from "firebase/firestore";
import app from './firebase'; // Assurez-vous de corriger le chemin du fichier si nécessaire

import takuzuData from '../data/takuzuData.json';

const TakuzuGame = () => {
  const [board, setBoard] = useState([]);
  const [winner, setWinner] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [elapsedTime, setElapsedTime] = useState(0); // État pour suivre le temps écoulé
  const [timerStarted, setTimerStarted] = useState(false); // État pour suivre si le chronomètre a démarré

  useEffect(() => {
    importTakuzu();
  }, []);

  const importTakuzu = () => {
    const initialBoard = takuzuData.takuzu[0];
    const newBoard = Object.values(initialBoard).map(row => row.split('').map(cell => ({ value: cell === '-' ? null : parseInt(cell), isAutoGenerated: cell !== '-' })));
    setBoard(newBoard);
  };

  const handleCellClick = (rowIndex, colIndex) => {
    if (!winner) {
      if (!timerStarted) { // Démarrer le chronomètre lors de la première action sur la grille
        startTimer();
      }
      const newBoard = [...board];
      const cell = newBoard[rowIndex][colIndex];
      if (!cell.isAutoGenerated) {
        const newValue = cell.value === null ? 0 : cell.value === 0 ? 1 : null;
        newBoard[rowIndex][colIndex] = { value: newValue, isAutoGenerated: false };
        setBoard(newBoard);
        checkWinner(newBoard);
      }
    }
  };

  const checkWinner = (currentBoard) => {
    const flatBoard = currentBoard.flat();
    const isBoardFull = flatBoard.every(cell => cell.value !== null);
    if (isBoardFull) {
      setWinner(true);
      setShowModal(true);
      saveWinnerTime(elapsedTime); // Enregistrer le temps écoulé du joueur gagnant dans la base de données
      stopTimer(); // Arrêter le chronomètre lorsque le joueur gagne
    }
  };

  const handleReset = () => {
    importTakuzu();
    setWinner(false);
    setElapsedTime(0); // Réinitialiser le temps écoulé lorsque le Takuzu est réinitialisé
    setTimerStarted(false); // Réinitialiser le statut du chronomètre
  };

  const handleCloseModal = () => {
    setShowModal(false);
    stopTimer(); // Arrêter le chronomètre lorsque la pop-up de victoire est fermée
  };

  const startTimer = () => {
    setTimerStarted(true); // Marquer le démarrage du chronomètre
    const timer = setInterval(() => {
      setElapsedTime(prevElapsedTime => prevElapsedTime + 1); // Incrémenter le temps écoulé chaque seconde
    }, 1000);
    return () => clearInterval(timer); // Retourner une fonction de nettoyage pour effacer l'intervalle lors du démontage du composant
  };

  const stopTimer = () => {
    setTimerStarted(false); // Réinitialiser le statut du chronomètre
  };

  const saveWinnerTime = async (time) => {
    const firestore = getFirestore(app);
    try {
      const docRef = await addDoc(collection(firestore, "winners"), {
        time: time,
        timestamp: serverTimestamp() // Ajouter un horodatage de serveur pour enregistrer le moment où le joueur a gagné
      });
      console.log("Winner time saved with ID: ", docRef.id);
    } catch (error) {
      console.error("Error adding winner time: ", error);
    }
  };

  return (
    <Container>
      <h1>Takuzu Du Jour</h1>
      <div>Temps écoulé: {elapsedTime} secondes</div>
      <Button onClick={handleReset}>Réinitialiser</Button>
      <Row>
        {board.map((row, rowIndex) => (
          <Row key={rowIndex}>
            {row.map((cell, colIndex) => (
              <Col key={colIndex} onClick={() => handleCellClick(rowIndex, colIndex)}>
                <div className={`cell ${cell.value === null ? 'empty' : cell.value === 0 ? 'cell-zero' : 'cell-one'}`}>
                  {cell.value !== null && cell.value}
                </div>
              </Col>
            ))}
          </Row>
        ))}
      </Row>
      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>Félicitations !</Modal.Title>
        </Modal.Header>
        <Modal.Body>Vous avez gagné en {elapsedTime} secondes !</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseModal}>
            Fermer
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default TakuzuGame;
