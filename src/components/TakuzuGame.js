import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Button, Modal } from 'react-bootstrap';
import './TakuzuGame.css';

const TakuzuGame = () => {
  const [board, setBoard] = useState([]);
  const [winner, setWinner] = useState(false);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    generateBoard();
  }, []);

  const generateBoard = () => {
    const size = 4;
    const newBoard = Array.from({ length: size }, () =>
      Array.from({ length: size }, () => ({ value: null, isAutoGenerated: false }))
    );
    fillRandomCells(newBoard);
    setBoard(newBoard);
  };

  const fillRandomCells = (currentBoard) => {
    const flatBoard = currentBoard.flat();
    const numCellsToFill = Math.floor(flatBoard.length * 0.4);
    let filledCells = 0;

    while (filledCells < numCellsToFill) {
      const index = Math.floor(Math.random() * flatBoard.length);
      const row = Math.floor(index / currentBoard.length);
      const col = index % currentBoard.length;

      if (currentBoard[row][col].value === null) {
        currentBoard[row][col] = { value: Math.random() < 0.5 ? 0 : 1, isAutoGenerated: true };
        filledCells++;
      }
    }
  };

  const handleCellClick = (rowIndex, colIndex) => {
    if (!winner) {
      const newBoard = [...board];
      const cell = newBoard[rowIndex][colIndex];
      if (!cell.isAutoGenerated) {
        // Ne rien faire si la cellule a été générée automatiquement
        const newValue = cell.value === null ? 0 : cell.value === 0 ? 1 : null;
        newBoard[rowIndex][colIndex] = { value: newValue, isAutoGenerated: false };
        setBoard(newBoard);
        checkWinner(newBoard);
      }
    }
  };

  const checkWinner = (currentBoard) => {
    const flatBoard = currentBoard.flat();
    const isBoardFull = flatBoard.every(cell => cell.value !== null);
    if (isBoardFull) {
      const isCorrect = checkRules(currentBoard);
      if (isCorrect) {
        setWinner(true);
        setShowModal(true);
      }
    }
  };

  const checkRules = (currentBoard) => {
    const size = currentBoard.length;

    // Vérifier le nombre de 0s et de 1s sur chaque ligne
    for (let i = 0; i < size; i++) {
        let zeros = 0;
        let ones = 0;
        for (let j = 0; j < size; j++) {
            if (currentBoard[i][j].value === 0) zeros++;
            else if (currentBoard[i][j].value === 1) ones++;
        }
        if (zeros !== size / 2 || ones !== size / 2) return false;
    }

    // Vérifier le nombre de 0s et de 1s sur chaque colonne
    for (let i = 0; i < size; i++) {
        let zeros = 0;
        let ones = 0;
        for (let j = 0; j < size; j++) {
            if (currentBoard[j][i].value === 0) zeros++;
            else if (currentBoard[j][i].value === 1) ones++;
        }
        if (zeros !== size / 2 || ones !== size / 2) return false;
    }

    // Si toutes les règles sont respectées, retourner true
    return true;
};


  const handleReset = () => {
    const newBoard = board.map(row =>
      row.map(cell => ({
        value: cell.isAutoGenerated ? cell.value : null,
        isAutoGenerated: cell.isAutoGenerated
      }))
    );
    setBoard(newBoard);
    setWinner(false);
  };


  const handleCloseModal = () => {
    setShowModal(false);
  };

  return (
    <Container>
      <h1>Takuzu Game</h1>
      <Button onClick={handleReset}>Reset</Button>
      <Row>
        {board.map((row, rowIndex) => (
          <Row key={rowIndex}>
            {row.map((cell, colIndex) => (
              <Col key={colIndex} onClick={() => handleCellClick(rowIndex, colIndex)}>
                <div className={`cell ${cell.value === null ? 'empty' : cell.value === 0 ? 'cell-zero' : 'cell-one'}`}>
                  {cell.value !== null && cell.value}
                </div>
              </Col>
            ))}
          </Row>
        ))}
      </Row>
      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>Congratulations!</Modal.Title>
        </Modal.Header>
        <Modal.Body>You have won!</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseModal}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default TakuzuGame;
