import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Button, Modal, Form } from 'react-bootstrap';
import { getFirestore, collection, addDoc, serverTimestamp } from "firebase/firestore";
import app from './firebase'; // Assurez-vous de corriger le chemin du fichier si nécessaire

import takuzuData from '../data/takuzuData.json';

const TakuzuGame = () => {
  const [board, setBoard] = useState([]);
  const [winner, setWinner] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [elapsedTime, setElapsedTime] = useState(0); // État pour suivre le temps écoulé
  const [timerStarted, setTimerStarted] = useState(false); // État pour suivre si le chronomètre a démarré
  const [pseudo, setPseudo] = useState('');
  const [formValid, setFormValid] = useState(false);

  useEffect(() => {
    importTakuzu();
  }, []);

  const importTakuzu = () => {
    const initialBoard = takuzuData.takuzu[0];
    const newBoard = Object.values(initialBoard).map(row => row.split('').map(cell => ({ value: cell === '-' ? null : parseInt(cell), isAutoGenerated: cell !== '-' })));
    setBoard(newBoard);
  };

  const handleCellClick = (rowIndex, colIndex) => {
    if (!winner) {
      if (!timerStarted) { // Démarrer le chronomètre lors de la première action sur la grille
        startTimer();
      }
      const newBoard = [...board];
      const cell = newBoard[rowIndex][colIndex];
      if (!cell.isAutoGenerated && cell.value === null) { // Vérifier si la cellule n'est pas générée automatiquement et est vide
        const newValue = 0;
        newBoard[rowIndex][colIndex] = { value: newValue, isAutoGenerated: false, isManual: true };
        setBoard(newBoard);
        if (checkWinner(newBoard)) {
          setWinner(true);
          setShowModal(true);
          saveWinnerTime(elapsedTime); // Enregistrer le temps écoulé du joueur gagnant dans la base de données
          stopTimer(); // Arrêter le chronomètre lorsque le joueur gagne
        }
      }
      // Si la cellule est générée automatiquement et n'a pas encore été modifiée manuellement
      if (cell.isAutoGenerated && !cell.isManual) {
        newBoard[rowIndex][colIndex] = { ...cell, isManual: true };
        setBoard(newBoard);
      }
    }
  };
  
  

  const checkConsecutiveSymbols = (array) => {
    for (let i = 0; i < array.length - 2; i++) {
      if (array[i] !== null && array[i] === array[i + 1] && array[i] === array[i + 2]) {
        return true; // Renvoie vrai s'il y a trois symboles consécutifs identiques
      }
    }
    return false; // Renvoie faux sinon
  };
  
  const checkWinner = (currentBoard) => {
    const flatBoard = currentBoard.flat();
    const isBoardFull = flatBoard.every(cell => cell.value !== null);
    if (isBoardFull) {
      // Vérifier les lignes
      for (let i = 0; i < currentBoard.length; i++) {
        if (checkConsecutiveSymbols(currentBoard[i])) {
          return true; // Si une ligne contient trois symboles consécutifs identiques, le joueur a perdu
        }
      }
      // Vérifier les colonnes
      for (let i = 0; i < currentBoard.length; i++) {
        const column = currentBoard.map(row => row[i]);
        if (checkConsecutiveSymbols(column)) {
          return true; // Si une colonne contient trois symboles consécutifs identiques, le joueur a perdu
        }
      }
      return false; // Si aucune ligne ni aucune colonne ne contient trois symboles consécutifs identiques, le joueur a gagné
    }
    return false; // Si le tableau n'est pas plein, le jeu continue
  };
  

  const handleReset = () => {
    importTakuzu();
    setWinner(false);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    stopTimer(); // Arrêter le chronomètre lorsque la pop-up de victoire est fermée
  };

  const handlePseudoChange = (e) => {
    const value = e.target.value;
    setPseudo(value);
    setFormValid(!!value); // Mettre à jour l'état formValid en fonction de la valeur du pseudo
  };  

  const startTimer = () => {
    setTimerStarted(true); // Marquer le démarrage du chronomètre
    const timer = setInterval(() => {
      setElapsedTime(prevElapsedTime => prevElapsedTime + 1); // Incrémenter le temps écoulé chaque seconde
    }, 1000);
    return () => clearInterval(timer); // Retourner une fonction de nettoyage pour effacer l'intervalle lors du démontage du composant
  };

  const stopTimer = () => {
    setTimerStarted(false); // Réinitialiser le statut du chronomètre
  };

  const saveWinnerTime = async (time) => {
    if (!pseudo) {
      console.error("Le champ de pseudo est obligatoire !");
      return;
    }
    const firestore = getFirestore(app);
    try {
      const docRef = await addDoc(collection(firestore, "winners"), {
        time: time,
        pseudo: pseudo,
        timestamp: serverTimestamp()
      });
      console.log("Winner time saved with ID: ", docRef.id);
    } catch (error) {
      console.error("Error adding winner time: ", error);
    }
  };



  return (
    <Container>
      <h1>Takuzu Du Jour</h1>
      <div>Temps écoulé: {elapsedTime} secondes</div>
      <Button onClick={handleReset}>Réinitialiser</Button>
      <Row>
        {board.map((row, rowIndex) => (
          <Row key={rowIndex}>
            {row.map((cell, colIndex) => (
              <Col key={colIndex} onClick={() => handleCellClick(rowIndex, colIndex)}>
                <div className={`cell ${cell.value === null ? 'empty' : cell.value === 0 ? 'cell-zero' : 'cell-one'}`}>
                  {cell.value !== null && cell.value}
                </div>
              </Col>
            ))}
          </Row>
        ))}
      </Row>
      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>Félicitations !</Modal.Title>
        </Modal.Header>
        <Modal.Body>Vous avez gagné en {elapsedTime} secondes !</Modal.Body>
        <Form.Group className="mb-3" controlId="formBasicPseudo">
          <Form.Label>Pseudo</Form.Label>
          <Form.Control type="text" placeholder="Entrez votre pseudo" value={pseudo} onChange={handlePseudoChange} />
        </Form.Group>
        <Modal.Footer>
          <Button variant="primary" type="submit" disabled={!formValid}>
            Soumettre
          </Button>

        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default TakuzuGame;
