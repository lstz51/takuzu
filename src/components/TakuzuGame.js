import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Button, Modal } from 'react-bootstrap';
import { getFirestore, collection, addDoc, serverTimestamp } from "firebase/firestore";
import app from './firebase';
import takuzuData from '../data/takuzuData.json';

const TakuzuGame = () => {
  const [board, setBoard] = useState([]);
  const [winner, setWinner] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [elapsedTime, setElapsedTime] = useState(0);
  const [timerStarted, setTimerStarted] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    importTakuzu();
  }, []);

  const importTakuzu = () => {
    const initialBoard = takuzuData.takuzu[0];
    const newBoard = Object.values(initialBoard).map(row =>
      row.split('').map(cell => ({
        value: cell === '-' ? null : parseInt(cell),
        isAutoGenerated: cell !== '-'
      }))
    );
    setBoard(newBoard);
  };

  const handleCellClick = (rowIndex, colIndex) => {
    if (!winner) {
      if (!timerStarted) {
        startTimer();
      }
      const newBoard = [...board];
      const cell = newBoard[rowIndex][colIndex];
      if (!cell.isAutoGenerated) {
        const newValue = cell.value === null ? 0 : cell.value === 0 ? 1 : null;
        newBoard[rowIndex][colIndex] = { value: newValue, isAutoGenerated: false, isManual: true };
        setBoard(newBoard);
        if (checkWinner(newBoard)) {
          setWinner(true);
          setShowModal(true);
          stopTimer();
          saveWinnerTime(elapsedTime);
        }
      }
    }
  };

  const checkConsecutiveSymbols = (array) => {
    for (let i = 0; i < array.length - 2; i++) {
      if (array[i] !== null && array[i] === array[i + 1] && array[i] === array[i + 2]) {
        return true;
      }
    }
    return false;
  };

  const checkEqualNumberOfSymbols = (array) => {
    const zeros = array.filter(value => value === 0).length;
    const ones = array.filter(value => value === 1).length;
    return zeros === ones;
  };

  const checkUniqueRowsAndColumns = (board) => {
    const rows = board.map(row => row.map(cell => cell.value).join(''));
    const columns = board[0].map((_, colIndex) => board.map(row => row[colIndex].value).join(''));
    const uniqueRows = new Set(rows);
    const uniqueColumns = new Set(columns);
    return uniqueRows.size === rows.length && uniqueColumns.size === columns.length;
  };

  const checkWinner = (currentBoard) => {
    const flatBoard = currentBoard.flat();
    const isBoardFull = flatBoard.every(cell => cell.value !== null);
    if (isBoardFull) {
      for (let i = 0; i < currentBoard.length; i++) {
        if (checkConsecutiveSymbols(currentBoard[i]) || !checkEqualNumberOfSymbols(currentBoard[i])) {
          return false;
        }
      }
      for (let i = 0; i < currentBoard.length; i++) {
        const column = currentBoard.map(row => row[i]);
        if (checkConsecutiveSymbols(column) || !checkEqualNumberOfSymbols(column)) {
          return false;
        }
      }
      if (!checkUniqueRowsAndColumns(currentBoard)) {
        return false;
      }
      return true;
    }
    return false;
  };

  const handleReset = () => {
    importTakuzu();
    setWinner(false);
    setElapsedTime(0);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    navigate('/scoreboard');
  };

  const startTimer = () => {
    setTimerStarted(true);
    const timer = setInterval(() => {
      setElapsedTime(prevElapsedTime => prevElapsedTime + 1);
    }, 1000);
    return () => clearInterval(timer);
  };

  const stopTimer = () => {
    setTimerStarted(false);
  };

  const saveWinnerTime = async (time) => {
    const pseudo = "anonymous"; // Utilisation d'un pseudo générique pour tous les joueurs
    const firestore = getFirestore(app);
    try {
      const docRef = await addDoc(collection(firestore, "winners"), {
        time: time,
        pseudo: pseudo,
        timestamp: serverTimestamp()
      });
      console.log("Winner time saved with ID: ", docRef.id);
    } catch (error) {
      console.error("Error adding winner time: ", error);
    }
  };

  return (
    <Container>
      <h1>Takuzu Du Jour</h1>
      <div>Temps écoulé: {elapsedTime} secondes</div>
      <Button onClick={handleReset}>Réinitialiser</Button>
      <Row>
        {board.map((row, rowIndex) => (
          <Row key={rowIndex}>
            {row.map((cell, colIndex) => (
              <Col key={colIndex} onClick={() => handleCellClick(rowIndex, colIndex)}>
                <div className={`cell ${cell.value === null ? 'empty' : cell.value === 0 ? 'cell-zero' : 'cell-one'} ${cell.isAutoGenerated ? 'cell-auto' : 'cell-manual'}`}>
                  {cell.value !== null && cell.value}
                </div>
              </Col>
            ))}
          </Row>
        ))}
      </Row>
      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>Félicitations !</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>Vous avez gagné en {elapsedTime} secondes !</p>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="primary" onClick={handleCloseModal}>
            Voir le classement
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default TakuzuGame;
